[
  {
    "objectID": "00-how-to-use-this-site.html",
    "href": "00-how-to-use-this-site.html",
    "title": "How to use this site",
    "section": "",
    "text": "There will be several topics on the sidebar, choose one then copy, learn, find errors and improve."
  },
  {
    "objectID": "aws-iam-auth.html",
    "href": "aws-iam-auth.html",
    "title": "What can we use to authenticate to AWS?",
    "section": "",
    "text": "IAM Access Keys _It is composed of:\n\nAn access key ID\nA secret access key _We use it for programmatic access to AWS. For example if we are using the command line interface to launch a service on AWS we would need to have an access key to be able to authenticate. _We use it for the API and when accessing AWS via the SDK _We can add MFA protection to the API calls. _We put these keys in program code or at a command prompt when using the AWS CLI or the AWS PowerShell tools. IMPORTANT: We can create, modify, view or rotate access keys.\n\nIAM Console Password\n\nUser account will have a password.\nWe use a username and a password to access the AWS Management Console (Visual Interface in which we can interact with AWS)\nThis can be also protected with MFA.\n\nIAM Server Certificate / Signing Certificate\n\nSecure Sockets Layer (SSL) / Transport Layer Security (TLS) certificates that we can use to authenticate with some AWS services\nWe can provision, manage and deploy this authentication using the AWS Certificate Manager (ACM)."
  },
  {
    "objectID": "aws-iam-billing-alarm.html",
    "href": "aws-iam-billing-alarm.html",
    "title": "Setting Billing Alarm",
    "section": "",
    "text": "Email alert to let us know when we reach certain dollars threshold.\nOnly the root account has access to modify billing information\n\nBilling dashboard\nBilling Preferences\n\nReceive Free Tier Usage Alerts (Enter an e-mail)\nReceive Billing Alerts\nManage Billing Alerts\nIn CloudWatch go to Billing\nCreate Alarm\nConfiguration, then Next\nCreate a New Topic\nSet an e-mail endpoint\nSet a name\nCreate Alarm\nView SNS subscriptions\nGo to your e-mail and confirm the SNS"
  },
  {
    "objectID": "aws-iam-creating-users.html",
    "href": "aws-iam-creating-users.html",
    "title": "Create IAM Users",
    "section": "",
    "text": "Create a user account that we can log on.\n\nWithin IAM go to Users\nAdd user\nGive it a friendly name\nSelect AWS access type\n\nProgrammatic access (an access key will be created)\nAWS Management Console access\n\nSet auto/custom password\nTick Require password reset if needed\n\n\nSet permissions\n\nWe can:\n\nAdd the user to a group (create a group if we haven’t created any groups yet)\nCopy permissions from existing user\nAttach existing policies directly\n\n\n\n5.1 We created a group a gave it AdministratorAccess\n\nCreate user\nWe get an Access key ID and a Secret access key which show only once\nClose"
  },
  {
    "objectID": "aws-iam-pass-policy.html",
    "href": "aws-iam-pass-policy.html",
    "title": "Setting Password Policy",
    "section": "",
    "text": "A password policy is a set of rules that define the type of password an IAM user can set.\n\nGo to Account Settings\nSpecify the password policy."
  },
  {
    "objectID": "aws-iam-sign-in-link.html",
    "href": "aws-iam-sign-in-link.html",
    "title": "Sign-in Link",
    "section": "",
    "text": "_This is the URL that users will use to log into the AWS account _We can modify it to be more user-friendly _The custom-value we choose does need to be unique\nhttps://custom-value.signin.aws.amazon.com/console\nThe custom-value is the alias for the account name, so any user account can be sign-in using this alias."
  },
  {
    "objectID": "aws-iam-sts.html",
    "href": "aws-iam-sts.html",
    "title": "Security Token Service (STS)",
    "section": "",
    "text": "A user may need some information that is only available at another account. How does this user access that information?\nUser ————> Role ————-> AWS STS ——–> Authentication ——–> User ————> Information\n_AWS STS is a web service that enables you to request temporary, limited-privilege credentials for IAM users or users that we authenticate (federated users) _In other words, users can have temporary, limited-privilege credentials for accessing certain services. _AWS STS is a global service, and they go to a single endpoint https://sts.amazonaws.com _By default, all regions are enabled for STS but can be disabled."
  },
  {
    "objectID": "aws-iam.html",
    "href": "aws-iam.html",
    "title": "Identity and Access Management (IAM)",
    "section": "",
    "text": "IAM is the service that provides USERS, GROUPS and POLICIES so that we can access our AWS accounts and we can do that securely."
  },
  {
    "objectID": "aws-iam.html#iam-users",
    "href": "aws-iam.html#iam-users",
    "title": "Identity and Access Management (IAM)",
    "section": "IAM Users",
    "text": "IAM Users\n\nIt is an entity that represents a person or service (a user account that can be used by a service rather than human being)\nWe can apply a policy which is a list of permissions which says what this user is allowed to do on AWS\nBy default, users cannot do anything in the account. Users need a policy in order to do something in the account.\nUp to 5000 users per AWS account.\nEach user account will have a friendly name and an Amazon Resource Name (ARN) which uniquely identifies the user across AWS.\n\n\nA user account can be assigned:\n\nAccess key ID\nSecret access key _This is called a “keeper” and is a way a user account can programmatically access the AWS API, CLI, SDK and other development tools.\nA password for access to the AWS Management Console.\nEach user has a friendly name and an Amazon Resource Name (ARN) which uniquely identifies the user across AWS.\n\nRoot User Credentials:\n\nemail address that we used to create the account\npassword _A Root account has full administrative permissions and cannot be restricted. Do not user root user credentials. _BEST PRACTICE: Create a user account and associate a policy or administrative permissions.\n\nService Accounts:\n\nUsers accounts that are created to represent an application."
  },
  {
    "objectID": "aws-iam.html#iam-groups",
    "href": "aws-iam.html#iam-groups",
    "title": "Identity and Access Management (IAM)",
    "section": "IAM Groups",
    "text": "IAM Groups\n_It is a collection of users _We can also apply a policy that is relevant to the user accounts that we have put into a particular group. These policies are attached to the users within the group. _A group is not an identity and cannot be identified as a principal in an IAM policy. Essentially, it means that a group is not something that you can write into a permissions policy but we can take a permission policy and apply it to a group which is then passed to users within the group. _We can nest groups so we cannot have groups within groups. _BEST PRACTICE: Use groups to assign permissions to users _BEST PRACTIVE: Use the principal of least privilege when assigning permissions."
  },
  {
    "objectID": "aws-iam.html#iam-roles",
    "href": "aws-iam.html#iam-roles",
    "title": "Identity and Access Management (IAM)",
    "section": "IAM Roles",
    "text": "IAM Roles\n_Roles are created and then “assumed” by a trusted entity. _We use it for delegation _We can also apply a policy _Roles are esentially used by services _It defines a set of permissions for making service requests in AWS\n\nFor example:\n\nWe can have a role that provides access to the S3 storage system or DynamoDB database service or AWS Lambda.\nThis role is provided those permissions to execute the specific requests.\n\n\n_We assign that role to another AWS service and that service is then able to start Lambda and make it work. _THEREFORE: We use IAM Roles for delegate permissions to resources for users and services without using permanent credentials (e.g. username and password). IAM users or AWS Services can assume a role to obtain temporary security credentials that can be used to make AWS API calls."
  },
  {
    "objectID": "aws-iam.html#iam-policy",
    "href": "aws-iam.html#iam-policy",
    "title": "Identity and Access Management (IAM)",
    "section": "IAM Policy",
    "text": "IAM Policy\n_Documents that define permissions that can be applied to users, groups and roles _Written in JSON _All permissions are implicitly denied by default _The most restrictive policy is always applied _The IAM Policy Simulator is a tool that helps us understand, test and validate the effects of access control policies _There is a Conditional Element that we can used to apply conditional logic (the permission is applied only if x argument satisfies y value)."
  },
  {
    "objectID": "aws-infra-vpc.html",
    "href": "aws-infra-vpc.html",
    "title": "Virtual Private Cloud (VPC)",
    "section": "",
    "text": "VPC _A VPC is a logically isolated section of the AWS cloud within a region where we can launch our own resources. _Within a VPC we can create our own networks using our own IP ranges. _A VPC sits within a region and we can have up to 5 VPCs within each region by default. _By default, one VPC is create by default in every one of those regions around the world. _Every VPC has a Classless Inter Domain Routing (CIDR) block.\nSubnets _Within a VPC we create public or private subnets which sits within AZs. _Then we launch our resources into the subnets. _Auto-assign public IPv4 will allow EC2 instances pick an IPv4 address automatically. _Each subnet will have a different block of addresses but they will be within the overall CIDR block of the VPC.\nVPC Router _The way we communicate between AZs and within subnets, whether they are in the same AZ or not, is through the VPC Router _Every VPC has a Route Table which has a IP address range which helps in the communication between all AZs (CIDR). _By defining the IP Range for the VPC, the route table will automatically be configured to route between all the AZs and subnets within the VPC\nInternet Gateway _It allows us to access the outside world. For example, send requests out to an Internet website through the IG _We need to specify the Internet Gateway ID and an IP address as a destination\nIncident Gateway _It allows us to be able to communicate outside of AWS to the Internet"
  },
  {
    "objectID": "aws-infra.html",
    "href": "aws-infra.html",
    "title": "Global Infrastructure",
    "section": "",
    "text": "Region _It is a geographical area with 2 or more AZs, isolated from other AWS Regions.\nAvailability Zone (AZ) _One or more data centers that are physically separate and isolated from other AZs _They are connected with low latency, highly available, high bandwidth links _We have networking connectivity between all of the AZs as well\n\nTherefore, we can deploy our resources within a region but into separate AZs for high availability and redudancy. If there is an outage on one AZ, the resources on the other one are not affected.\n\nEdge Location (CloudFront) _A location with a cache of content that can be delivered at low latency to users _The idea is to reduce latency when accessing cached content\nRegional Edge Cache (CloudFront) _Larger caches that sit between AWS Services and Edge Locations\n\nCloudFront is all about caching content.\n\nGlobal Network (Private) _Highly available, low-latency private global network interconnecting every data center, AZ, and AWS Region"
  },
  {
    "objectID": "sklearn-tuning-hps.html",
    "href": "sklearn-tuning-hps.html",
    "title": "Sklearn Hyperparameter Tuning",
    "section": "",
    "text": "Here we go again\n\n\nCode\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import GridSearchCV"
  }
]